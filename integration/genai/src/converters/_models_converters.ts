/**
 * @license
 * Copyright 2025 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

// Code generated by the Google Gen AI SDK generator DO NOT EDIT.

import {ApiClient} from '../_api_client';
import * as common from '../_common';
import * as t from '../_transformers';
import * as types from '../types';

export function partToMldev(
  apiClient: ApiClient,
  fromObject: types.Part,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (common.getValueByPath(fromObject, ['videoMetadata']) !== undefined) {
    throw new Error('videoMetadata parameter is not supported in Gemini API.');
  }

  const fromThought = common.getValueByPath(fromObject, ['thought']);
  if (fromThought != null) {
    common.setValueByPath(toObject, ['thought'], fromThought);
  }

  const fromCodeExecutionResult = common.getValueByPath(fromObject, [
    'codeExecutionResult',
  ]);
  if (fromCodeExecutionResult != null) {
    common.setValueByPath(
      toObject,
      ['codeExecutionResult'],
      fromCodeExecutionResult,
    );
  }

  const fromExecutableCode = common.getValueByPath(fromObject, [
    'executableCode',
  ]);
  if (fromExecutableCode != null) {
    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);
  }

  const fromFileData = common.getValueByPath(fromObject, ['fileData']);
  if (fromFileData != null) {
    common.setValueByPath(toObject, ['fileData'], fromFileData);
  }

  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);
  if (fromFunctionCall != null) {
    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);
  }

  const fromFunctionResponse = common.getValueByPath(fromObject, [
    'functionResponse',
  ]);
  if (fromFunctionResponse != null) {
    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);
  }

  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);
  if (fromInlineData != null) {
    common.setValueByPath(toObject, ['inlineData'], fromInlineData);
  }

  const fromText = common.getValueByPath(fromObject, ['text']);
  if (fromText != null) {
    common.setValueByPath(toObject, ['text'], fromText);
  }

  return toObject;
}

export function contentToMldev(
  apiClient: ApiClient,
  fromObject: types.Content,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromParts = common.getValueByPath(fromObject, ['parts']);
  if (fromParts != null) {
    if (Array.isArray(fromParts)) {
      common.setValueByPath(
        toObject,
        ['parts'],
        fromParts.map((item) => {
          return partToMldev(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(toObject, ['parts'], fromParts);
    }
  }

  const fromRole = common.getValueByPath(fromObject, ['role']);
  if (fromRole != null) {
    common.setValueByPath(toObject, ['role'], fromRole);
  }

  return toObject;
}

export function schemaToMldev(
  apiClient: ApiClient,
  fromObject: types.Schema,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (common.getValueByPath(fromObject, ['example']) !== undefined) {
    throw new Error('example parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['pattern']) !== undefined) {
    throw new Error('pattern parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['default']) !== undefined) {
    throw new Error('default parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['maxLength']) !== undefined) {
    throw new Error('maxLength parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['minLength']) !== undefined) {
    throw new Error('minLength parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['minProperties']) !== undefined) {
    throw new Error('minProperties parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['maxProperties']) !== undefined) {
    throw new Error('maxProperties parameter is not supported in Gemini API.');
  }

  const fromAnyOf = common.getValueByPath(fromObject, ['anyOf']);
  if (fromAnyOf != null) {
    common.setValueByPath(toObject, ['anyOf'], fromAnyOf);
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription != null) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromEnum = common.getValueByPath(fromObject, ['enum']);
  if (fromEnum != null) {
    common.setValueByPath(toObject, ['enum'], fromEnum);
  }

  const fromFormat = common.getValueByPath(fromObject, ['format']);
  if (fromFormat != null) {
    common.setValueByPath(toObject, ['format'], fromFormat);
  }

  const fromItems = common.getValueByPath(fromObject, ['items']);
  if (fromItems != null) {
    common.setValueByPath(toObject, ['items'], fromItems);
  }

  const fromMaxItems = common.getValueByPath(fromObject, ['maxItems']);
  if (fromMaxItems != null) {
    common.setValueByPath(toObject, ['maxItems'], fromMaxItems);
  }

  const fromMaximum = common.getValueByPath(fromObject, ['maximum']);
  if (fromMaximum != null) {
    common.setValueByPath(toObject, ['maximum'], fromMaximum);
  }

  const fromMinItems = common.getValueByPath(fromObject, ['minItems']);
  if (fromMinItems != null) {
    common.setValueByPath(toObject, ['minItems'], fromMinItems);
  }

  const fromMinimum = common.getValueByPath(fromObject, ['minimum']);
  if (fromMinimum != null) {
    common.setValueByPath(toObject, ['minimum'], fromMinimum);
  }

  const fromNullable = common.getValueByPath(fromObject, ['nullable']);
  if (fromNullable != null) {
    common.setValueByPath(toObject, ['nullable'], fromNullable);
  }

  const fromProperties = common.getValueByPath(fromObject, ['properties']);
  if (fromProperties != null) {
    common.setValueByPath(toObject, ['properties'], fromProperties);
  }

  const fromPropertyOrdering = common.getValueByPath(fromObject, [
    'propertyOrdering',
  ]);
  if (fromPropertyOrdering != null) {
    common.setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);
  }

  const fromRequired = common.getValueByPath(fromObject, ['required']);
  if (fromRequired != null) {
    common.setValueByPath(toObject, ['required'], fromRequired);
  }

  const fromTitle = common.getValueByPath(fromObject, ['title']);
  if (fromTitle != null) {
    common.setValueByPath(toObject, ['title'], fromTitle);
  }

  const fromType = common.getValueByPath(fromObject, ['type']);
  if (fromType != null) {
    common.setValueByPath(toObject, ['type'], fromType);
  }

  return toObject;
}

export function modelSelectionConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.ModelSelectionConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (
    common.getValueByPath(fromObject, ['featureSelectionPreference']) !==
    undefined
  ) {
    throw new Error(
      'featureSelectionPreference parameter is not supported in Gemini API.',
    );
  }

  return toObject;
}

export function safetySettingToMldev(
  apiClient: ApiClient,
  fromObject: types.SafetySetting,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (common.getValueByPath(fromObject, ['method']) !== undefined) {
    throw new Error('method parameter is not supported in Gemini API.');
  }

  const fromCategory = common.getValueByPath(fromObject, ['category']);
  if (fromCategory != null) {
    common.setValueByPath(toObject, ['category'], fromCategory);
  }

  const fromThreshold = common.getValueByPath(fromObject, ['threshold']);
  if (fromThreshold != null) {
    common.setValueByPath(toObject, ['threshold'], fromThreshold);
  }

  return toObject;
}

export function functionDeclarationToMldev(
  apiClient: ApiClient,
  fromObject: types.FunctionDeclaration,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (common.getValueByPath(fromObject, ['response']) !== undefined) {
    throw new Error('response parameter is not supported in Gemini API.');
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription != null) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName != null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromParameters = common.getValueByPath(fromObject, ['parameters']);
  if (fromParameters != null) {
    common.setValueByPath(toObject, ['parameters'], fromParameters);
  }

  return toObject;
}

export function googleSearchToMldev(): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  return toObject;
}

export function dynamicRetrievalConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.DynamicRetrievalConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode != null) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromDynamicThreshold = common.getValueByPath(fromObject, [
    'dynamicThreshold',
  ]);
  if (fromDynamicThreshold != null) {
    common.setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);
  }

  return toObject;
}

export function googleSearchRetrievalToMldev(
  apiClient: ApiClient,
  fromObject: types.GoogleSearchRetrieval,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromDynamicRetrievalConfig = common.getValueByPath(fromObject, [
    'dynamicRetrievalConfig',
  ]);
  if (fromDynamicRetrievalConfig != null) {
    common.setValueByPath(
      toObject,
      ['dynamicRetrievalConfig'],
      dynamicRetrievalConfigToMldev(apiClient, fromDynamicRetrievalConfig),
    );
  }

  return toObject;
}

export function toolToMldev(
  apiClient: ApiClient,
  fromObject: types.Tool,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromFunctionDeclarations = common.getValueByPath(fromObject, [
    'functionDeclarations',
  ]);
  if (fromFunctionDeclarations != null) {
    if (Array.isArray(fromFunctionDeclarations)) {
      common.setValueByPath(
        toObject,
        ['functionDeclarations'],
        fromFunctionDeclarations.map((item) => {
          return functionDeclarationToMldev(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(
        toObject,
        ['functionDeclarations'],
        fromFunctionDeclarations,
      );
    }
  }

  if (common.getValueByPath(fromObject, ['retrieval']) !== undefined) {
    throw new Error('retrieval parameter is not supported in Gemini API.');
  }

  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);
  if (fromGoogleSearch != null) {
    common.setValueByPath(toObject, ['googleSearch'], googleSearchToMldev());
  }

  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [
    'googleSearchRetrieval',
  ]);
  if (fromGoogleSearchRetrieval != null) {
    common.setValueByPath(
      toObject,
      ['googleSearchRetrieval'],
      googleSearchRetrievalToMldev(apiClient, fromGoogleSearchRetrieval),
    );
  }

  const fromCodeExecution = common.getValueByPath(fromObject, [
    'codeExecution',
  ]);
  if (fromCodeExecution != null) {
    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);
  }

  return toObject;
}

export function functionCallingConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.FunctionCallingConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode != null) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromAllowedFunctionNames = common.getValueByPath(fromObject, [
    'allowedFunctionNames',
  ]);
  if (fromAllowedFunctionNames != null) {
    common.setValueByPath(
      toObject,
      ['allowedFunctionNames'],
      fromAllowedFunctionNames,
    );
  }

  return toObject;
}

export function toolConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.ToolConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromFunctionCallingConfig = common.getValueByPath(fromObject, [
    'functionCallingConfig',
  ]);
  if (fromFunctionCallingConfig != null) {
    common.setValueByPath(
      toObject,
      ['functionCallingConfig'],
      functionCallingConfigToMldev(apiClient, fromFunctionCallingConfig),
    );
  }

  return toObject;
}

export function prebuiltVoiceConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.PrebuiltVoiceConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromVoiceName = common.getValueByPath(fromObject, ['voiceName']);
  if (fromVoiceName != null) {
    common.setValueByPath(toObject, ['voiceName'], fromVoiceName);
  }

  return toObject;
}

export function voiceConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.VoiceConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromPrebuiltVoiceConfig = common.getValueByPath(fromObject, [
    'prebuiltVoiceConfig',
  ]);
  if (fromPrebuiltVoiceConfig != null) {
    common.setValueByPath(
      toObject,
      ['prebuiltVoiceConfig'],
      prebuiltVoiceConfigToMldev(apiClient, fromPrebuiltVoiceConfig),
    );
  }

  return toObject;
}

export function speechConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.SpeechConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromVoiceConfig = common.getValueByPath(fromObject, ['voiceConfig']);
  if (fromVoiceConfig != null) {
    common.setValueByPath(
      toObject,
      ['voiceConfig'],
      voiceConfigToMldev(apiClient, fromVoiceConfig),
    );
  }

  const fromLanguageCode = common.getValueByPath(fromObject, ['languageCode']);
  if (fromLanguageCode != null) {
    common.setValueByPath(toObject, ['languageCode'], fromLanguageCode);
  }

  return toObject;
}

export function thinkingConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.ThinkingConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromIncludeThoughts = common.getValueByPath(fromObject, [
    'includeThoughts',
  ]);
  if (fromIncludeThoughts != null) {
    common.setValueByPath(toObject, ['includeThoughts'], fromIncludeThoughts);
  }

  const fromThinkingBudget = common.getValueByPath(fromObject, [
    'thinkingBudget',
  ]);
  if (fromThinkingBudget != null) {
    common.setValueByPath(toObject, ['thinkingBudget'], fromThinkingBudget);
  }

  return toObject;
}

export function generateContentConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateContentConfig,
  parentObject: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromSystemInstruction = common.getValueByPath(fromObject, [
    'systemInstruction',
  ]);
  if (parentObject !== undefined && fromSystemInstruction != null) {
    common.setValueByPath(
      parentObject,
      ['systemInstruction'],
      contentToMldev(apiClient, t.tContent(apiClient, fromSystemInstruction)),
    );
  }

  const fromTemperature = common.getValueByPath(fromObject, ['temperature']);
  if (fromTemperature != null) {
    common.setValueByPath(toObject, ['temperature'], fromTemperature);
  }

  const fromTopP = common.getValueByPath(fromObject, ['topP']);
  if (fromTopP != null) {
    common.setValueByPath(toObject, ['topP'], fromTopP);
  }

  const fromTopK = common.getValueByPath(fromObject, ['topK']);
  if (fromTopK != null) {
    common.setValueByPath(toObject, ['topK'], fromTopK);
  }

  const fromCandidateCount = common.getValueByPath(fromObject, [
    'candidateCount',
  ]);
  if (fromCandidateCount != null) {
    common.setValueByPath(toObject, ['candidateCount'], fromCandidateCount);
  }

  const fromMaxOutputTokens = common.getValueByPath(fromObject, [
    'maxOutputTokens',
  ]);
  if (fromMaxOutputTokens != null) {
    common.setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);
  }

  const fromStopSequences = common.getValueByPath(fromObject, [
    'stopSequences',
  ]);
  if (fromStopSequences != null) {
    common.setValueByPath(toObject, ['stopSequences'], fromStopSequences);
  }

  const fromResponseLogprobs = common.getValueByPath(fromObject, [
    'responseLogprobs',
  ]);
  if (fromResponseLogprobs != null) {
    common.setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);
  }

  const fromLogprobs = common.getValueByPath(fromObject, ['logprobs']);
  if (fromLogprobs != null) {
    common.setValueByPath(toObject, ['logprobs'], fromLogprobs);
  }

  const fromPresencePenalty = common.getValueByPath(fromObject, [
    'presencePenalty',
  ]);
  if (fromPresencePenalty != null) {
    common.setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);
  }

  const fromFrequencyPenalty = common.getValueByPath(fromObject, [
    'frequencyPenalty',
  ]);
  if (fromFrequencyPenalty != null) {
    common.setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);
  }

  const fromSeed = common.getValueByPath(fromObject, ['seed']);
  if (fromSeed != null) {
    common.setValueByPath(toObject, ['seed'], fromSeed);
  }

  const fromResponseMimeType = common.getValueByPath(fromObject, [
    'responseMimeType',
  ]);
  if (fromResponseMimeType != null) {
    common.setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);
  }

  const fromResponseSchema = common.getValueByPath(fromObject, [
    'responseSchema',
  ]);
  if (fromResponseSchema != null) {
    common.setValueByPath(
      toObject,
      ['responseSchema'],
      schemaToMldev(apiClient, t.tSchema(apiClient, fromResponseSchema)),
    );
  }

  if (common.getValueByPath(fromObject, ['routingConfig']) !== undefined) {
    throw new Error('routingConfig parameter is not supported in Gemini API.');
  }

  if (
    common.getValueByPath(fromObject, ['modelSelectionConfig']) !== undefined
  ) {
    throw new Error(
      'modelSelectionConfig parameter is not supported in Gemini API.',
    );
  }

  const fromSafetySettings = common.getValueByPath(fromObject, [
    'safetySettings',
  ]);
  if (parentObject !== undefined && fromSafetySettings != null) {
    if (Array.isArray(fromSafetySettings)) {
      common.setValueByPath(
        parentObject,
        ['safetySettings'],
        fromSafetySettings.map((item) => {
          return safetySettingToMldev(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(
        parentObject,
        ['safetySettings'],
        fromSafetySettings,
      );
    }
  }

  const fromTools = common.getValueByPath(fromObject, ['tools']);
  if (parentObject !== undefined && fromTools != null) {
    if (Array.isArray(fromTools)) {
      common.setValueByPath(
        parentObject,
        ['tools'],
        t.tTools(
          apiClient,
          t.tTools(apiClient, fromTools).map((item) => {
            return toolToMldev(apiClient, t.tTool(apiClient, item));
          }),
        ),
      );
    } else {
      common.setValueByPath(
        parentObject,
        ['tools'],
        t.tTools(apiClient, fromTools),
      );
    }
  }

  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);
  if (parentObject !== undefined && fromToolConfig != null) {
    common.setValueByPath(
      parentObject,
      ['toolConfig'],
      toolConfigToMldev(apiClient, fromToolConfig),
    );
  }

  if (common.getValueByPath(fromObject, ['labels']) !== undefined) {
    throw new Error('labels parameter is not supported in Gemini API.');
  }

  const fromCachedContent = common.getValueByPath(fromObject, [
    'cachedContent',
  ]);
  if (parentObject !== undefined && fromCachedContent != null) {
    common.setValueByPath(
      parentObject,
      ['cachedContent'],
      t.tCachedContentName(apiClient, fromCachedContent),
    );
  }

  const fromResponseModalities = common.getValueByPath(fromObject, [
    'responseModalities',
  ]);
  if (fromResponseModalities != null) {
    common.setValueByPath(
      toObject,
      ['responseModalities'],
      fromResponseModalities,
    );
  }

  const fromMediaResolution = common.getValueByPath(fromObject, [
    'mediaResolution',
  ]);
  if (fromMediaResolution != null) {
    common.setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);
  }

  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);
  if (fromSpeechConfig != null) {
    common.setValueByPath(
      toObject,
      ['speechConfig'],
      speechConfigToMldev(
        apiClient,
        t.tSpeechConfig(apiClient, fromSpeechConfig),
      ),
    );
  }

  if (common.getValueByPath(fromObject, ['audioTimestamp']) !== undefined) {
    throw new Error('audioTimestamp parameter is not supported in Gemini API.');
  }

  const fromThinkingConfig = common.getValueByPath(fromObject, [
    'thinkingConfig',
  ]);
  if (fromThinkingConfig != null) {
    common.setValueByPath(
      toObject,
      ['thinkingConfig'],
      thinkingConfigToMldev(apiClient, fromThinkingConfig),
    );
  }

  return toObject;
}

export function generateContentParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateContentParameters,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel != null) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (fromContents != null) {
    if (Array.isArray(fromContents)) {
      common.setValueByPath(
        toObject,
        ['contents'],
        t.tContents(
          apiClient,
          t.tContents(apiClient, fromContents).map((item) => {
            return contentToMldev(apiClient, item);
          }),
        ),
      );
    } else {
      common.setValueByPath(
        toObject,
        ['contents'],
        t.tContents(apiClient, fromContents),
      );
    }
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    common.setValueByPath(
      toObject,
      ['generationConfig'],
      generateContentConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

export function embedContentConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.EmbedContentConfig,
  parentObject: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromTaskType = common.getValueByPath(fromObject, ['taskType']);
  if (parentObject !== undefined && fromTaskType != null) {
    common.setValueByPath(
      parentObject,
      ['requests[]', 'taskType'],
      fromTaskType,
    );
  }

  const fromTitle = common.getValueByPath(fromObject, ['title']);
  if (parentObject !== undefined && fromTitle != null) {
    common.setValueByPath(parentObject, ['requests[]', 'title'], fromTitle);
  }

  const fromOutputDimensionality = common.getValueByPath(fromObject, [
    'outputDimensionality',
  ]);
  if (parentObject !== undefined && fromOutputDimensionality != null) {
    common.setValueByPath(
      parentObject,
      ['requests[]', 'outputDimensionality'],
      fromOutputDimensionality,
    );
  }

  if (common.getValueByPath(fromObject, ['mimeType']) !== undefined) {
    throw new Error('mimeType parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['autoTruncate']) !== undefined) {
    throw new Error('autoTruncate parameter is not supported in Gemini API.');
  }

  return toObject;
}

export function embedContentParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.EmbedContentParameters,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel != null) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (fromContents != null) {
    common.setValueByPath(
      toObject,
      ['requests[]', 'content'],
      t.tContentsForEmbed(apiClient, fromContents),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    common.setValueByPath(
      toObject,
      ['config'],
      embedContentConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  const fromModelForEmbedContent = common.getValueByPath(fromObject, ['model']);
  if (fromModelForEmbedContent !== undefined) {
    common.setValueByPath(
      toObject,
      ['requests[]', 'model'],
      t.tModel(apiClient, fromModelForEmbedContent),
    );
  }

  return toObject;
}

export function generateImagesConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateImagesConfig,
  parentObject: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (common.getValueByPath(fromObject, ['outputGcsUri']) !== undefined) {
    throw new Error('outputGcsUri parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['negativePrompt']) !== undefined) {
    throw new Error('negativePrompt parameter is not supported in Gemini API.');
  }

  const fromNumberOfImages = common.getValueByPath(fromObject, [
    'numberOfImages',
  ]);
  if (parentObject !== undefined && fromNumberOfImages != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'sampleCount'],
      fromNumberOfImages,
    );
  }

  const fromAspectRatio = common.getValueByPath(fromObject, ['aspectRatio']);
  if (parentObject !== undefined && fromAspectRatio != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'aspectRatio'],
      fromAspectRatio,
    );
  }

  const fromGuidanceScale = common.getValueByPath(fromObject, [
    'guidanceScale',
  ]);
  if (parentObject !== undefined && fromGuidanceScale != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'guidanceScale'],
      fromGuidanceScale,
    );
  }

  if (common.getValueByPath(fromObject, ['seed']) !== undefined) {
    throw new Error('seed parameter is not supported in Gemini API.');
  }

  const fromSafetyFilterLevel = common.getValueByPath(fromObject, [
    'safetyFilterLevel',
  ]);
  if (parentObject !== undefined && fromSafetyFilterLevel != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'safetySetting'],
      fromSafetyFilterLevel,
    );
  }

  const fromPersonGeneration = common.getValueByPath(fromObject, [
    'personGeneration',
  ]);
  if (parentObject !== undefined && fromPersonGeneration != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'personGeneration'],
      fromPersonGeneration,
    );
  }

  const fromIncludeSafetyAttributes = common.getValueByPath(fromObject, [
    'includeSafetyAttributes',
  ]);
  if (parentObject !== undefined && fromIncludeSafetyAttributes != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'includeSafetyAttributes'],
      fromIncludeSafetyAttributes,
    );
  }

  const fromIncludeRaiReason = common.getValueByPath(fromObject, [
    'includeRaiReason',
  ]);
  if (parentObject !== undefined && fromIncludeRaiReason != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'includeRaiReason'],
      fromIncludeRaiReason,
    );
  }

  const fromLanguage = common.getValueByPath(fromObject, ['language']);
  if (parentObject !== undefined && fromLanguage != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'language'],
      fromLanguage,
    );
  }

  const fromOutputMimeType = common.getValueByPath(fromObject, [
    'outputMimeType',
  ]);
  if (parentObject !== undefined && fromOutputMimeType != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'outputOptions', 'mimeType'],
      fromOutputMimeType,
    );
  }

  const fromOutputCompressionQuality = common.getValueByPath(fromObject, [
    'outputCompressionQuality',
  ]);
  if (parentObject !== undefined && fromOutputCompressionQuality != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'outputOptions', 'compressionQuality'],
      fromOutputCompressionQuality,
    );
  }

  if (common.getValueByPath(fromObject, ['addWatermark']) !== undefined) {
    throw new Error('addWatermark parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['enhancePrompt']) !== undefined) {
    throw new Error('enhancePrompt parameter is not supported in Gemini API.');
  }

  return toObject;
}

export function generateImagesParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateImagesParameters,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel != null) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);
  if (fromPrompt != null) {
    common.setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    common.setValueByPath(
      toObject,
      ['config'],
      generateImagesConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

export function getModelParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.GetModelParameters,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel != null) {
    common.setValueByPath(
      toObject,
      ['_url', 'name'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

export function countTokensConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.CountTokensConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (common.getValueByPath(fromObject, ['systemInstruction']) !== undefined) {
    throw new Error(
      'systemInstruction parameter is not supported in Gemini API.',
    );
  }

  if (common.getValueByPath(fromObject, ['tools']) !== undefined) {
    throw new Error('tools parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['generationConfig']) !== undefined) {
    throw new Error(
      'generationConfig parameter is not supported in Gemini API.',
    );
  }

  return toObject;
}

export function countTokensParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.CountTokensParameters,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel != null) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (fromContents != null) {
    if (Array.isArray(fromContents)) {
      common.setValueByPath(
        toObject,
        ['contents'],
        t.tContents(
          apiClient,
          t.tContents(apiClient, fromContents).map((item) => {
            return contentToMldev(apiClient, item);
          }),
        ),
      );
    } else {
      common.setValueByPath(
        toObject,
        ['contents'],
        t.tContents(apiClient, fromContents),
      );
    }
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    common.setValueByPath(
      toObject,
      ['config'],
      countTokensConfigToMldev(apiClient, fromConfig),
    );
  }

  return toObject;
}

export function imageToMldev(
  apiClient: ApiClient,
  fromObject: types.Image,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (common.getValueByPath(fromObject, ['gcsUri']) !== undefined) {
    throw new Error('gcsUri parameter is not supported in Gemini API.');
  }

  const fromImageBytes = common.getValueByPath(fromObject, ['imageBytes']);
  if (fromImageBytes != null) {
    common.setValueByPath(
      toObject,
      ['bytesBase64Encoded'],
      t.tBytes(apiClient, fromImageBytes),
    );
  }

  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);
  if (fromMimeType != null) {
    common.setValueByPath(toObject, ['mimeType'], fromMimeType);
  }

  return toObject;
}

export function generateVideosConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateVideosConfig,
  parentObject: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromNumberOfVideos = common.getValueByPath(fromObject, [
    'numberOfVideos',
  ]);
  if (parentObject !== undefined && fromNumberOfVideos != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'sampleCount'],
      fromNumberOfVideos,
    );
  }

  if (common.getValueByPath(fromObject, ['outputGcsUri']) !== undefined) {
    throw new Error('outputGcsUri parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['fps']) !== undefined) {
    throw new Error('fps parameter is not supported in Gemini API.');
  }

  const fromDurationSeconds = common.getValueByPath(fromObject, [
    'durationSeconds',
  ]);
  if (parentObject !== undefined && fromDurationSeconds != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'durationSeconds'],
      fromDurationSeconds,
    );
  }

  if (common.getValueByPath(fromObject, ['seed']) !== undefined) {
    throw new Error('seed parameter is not supported in Gemini API.');
  }

  const fromAspectRatio = common.getValueByPath(fromObject, ['aspectRatio']);
  if (parentObject !== undefined && fromAspectRatio != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'aspectRatio'],
      fromAspectRatio,
    );
  }

  if (common.getValueByPath(fromObject, ['resolution']) !== undefined) {
    throw new Error('resolution parameter is not supported in Gemini API.');
  }

  const fromPersonGeneration = common.getValueByPath(fromObject, [
    'personGeneration',
  ]);
  if (parentObject !== undefined && fromPersonGeneration != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'personGeneration'],
      fromPersonGeneration,
    );
  }

  if (common.getValueByPath(fromObject, ['pubsubTopic']) !== undefined) {
    throw new Error('pubsubTopic parameter is not supported in Gemini API.');
  }

  const fromNegativePrompt = common.getValueByPath(fromObject, [
    'negativePrompt',
  ]);
  if (parentObject !== undefined && fromNegativePrompt != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'negativePrompt'],
      fromNegativePrompt,
    );
  }

  if (common.getValueByPath(fromObject, ['enhancePrompt']) !== undefined) {
    throw new Error('enhancePrompt parameter is not supported in Gemini API.');
  }

  return toObject;
}

export function generateVideosParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateVideosParameters,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel != null) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);
  if (fromPrompt != null) {
    common.setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);
  }

  const fromImage = common.getValueByPath(fromObject, ['image']);
  if (fromImage != null) {
    common.setValueByPath(
      toObject,
      ['instances[0]', 'image'],
      imageToMldev(apiClient, fromImage),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    common.setValueByPath(
      toObject,
      ['config'],
      generateVideosConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

export function partToVertex(
  apiClient: ApiClient,
  fromObject: types.Part,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromVideoMetadata = common.getValueByPath(fromObject, [
    'videoMetadata',
  ]);
  if (fromVideoMetadata != null) {
    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);
  }

  const fromThought = common.getValueByPath(fromObject, ['thought']);
  if (fromThought != null) {
    common.setValueByPath(toObject, ['thought'], fromThought);
  }

  const fromCodeExecutionResult = common.getValueByPath(fromObject, [
    'codeExecutionResult',
  ]);
  if (fromCodeExecutionResult != null) {
    common.setValueByPath(
      toObject,
      ['codeExecutionResult'],
      fromCodeExecutionResult,
    );
  }

  const fromExecutableCode = common.getValueByPath(fromObject, [
    'executableCode',
  ]);
  if (fromExecutableCode != null) {
    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);
  }

  const fromFileData = common.getValueByPath(fromObject, ['fileData']);
  if (fromFileData != null) {
    common.setValueByPath(toObject, ['fileData'], fromFileData);
  }

  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);
  if (fromFunctionCall != null) {
    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);
  }

  const fromFunctionResponse = common.getValueByPath(fromObject, [
    'functionResponse',
  ]);
  if (fromFunctionResponse != null) {
    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);
  }

  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);
  if (fromInlineData != null) {
    common.setValueByPath(toObject, ['inlineData'], fromInlineData);
  }

  const fromText = common.getValueByPath(fromObject, ['text']);
  if (fromText != null) {
    common.setValueByPath(toObject, ['text'], fromText);
  }

  return toObject;
}

export function contentToVertex(
  apiClient: ApiClient,
  fromObject: types.Content,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromParts = common.getValueByPath(fromObject, ['parts']);
  if (fromParts != null) {
    if (Array.isArray(fromParts)) {
      common.setValueByPath(
        toObject,
        ['parts'],
        fromParts.map((item) => {
          return partToVertex(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(toObject, ['parts'], fromParts);
    }
  }

  const fromRole = common.getValueByPath(fromObject, ['role']);
  if (fromRole != null) {
    common.setValueByPath(toObject, ['role'], fromRole);
  }

  return toObject;
}

export function schemaToVertex(
  apiClient: ApiClient,
  fromObject: types.Schema,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromExample = common.getValueByPath(fromObject, ['example']);
  if (fromExample != null) {
    common.setValueByPath(toObject, ['example'], fromExample);
  }

  const fromPattern = common.getValueByPath(fromObject, ['pattern']);
  if (fromPattern != null) {
    common.setValueByPath(toObject, ['pattern'], fromPattern);
  }

  const fromDefault = common.getValueByPath(fromObject, ['default']);
  if (fromDefault != null) {
    common.setValueByPath(toObject, ['default'], fromDefault);
  }

  const fromMaxLength = common.getValueByPath(fromObject, ['maxLength']);
  if (fromMaxLength != null) {
    common.setValueByPath(toObject, ['maxLength'], fromMaxLength);
  }

  const fromMinLength = common.getValueByPath(fromObject, ['minLength']);
  if (fromMinLength != null) {
    common.setValueByPath(toObject, ['minLength'], fromMinLength);
  }

  const fromMinProperties = common.getValueByPath(fromObject, [
    'minProperties',
  ]);
  if (fromMinProperties != null) {
    common.setValueByPath(toObject, ['minProperties'], fromMinProperties);
  }

  const fromMaxProperties = common.getValueByPath(fromObject, [
    'maxProperties',
  ]);
  if (fromMaxProperties != null) {
    common.setValueByPath(toObject, ['maxProperties'], fromMaxProperties);
  }

  const fromAnyOf = common.getValueByPath(fromObject, ['anyOf']);
  if (fromAnyOf != null) {
    common.setValueByPath(toObject, ['anyOf'], fromAnyOf);
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription != null) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromEnum = common.getValueByPath(fromObject, ['enum']);
  if (fromEnum != null) {
    common.setValueByPath(toObject, ['enum'], fromEnum);
  }

  const fromFormat = common.getValueByPath(fromObject, ['format']);
  if (fromFormat != null) {
    common.setValueByPath(toObject, ['format'], fromFormat);
  }

  const fromItems = common.getValueByPath(fromObject, ['items']);
  if (fromItems != null) {
    common.setValueByPath(toObject, ['items'], fromItems);
  }

  const fromMaxItems = common.getValueByPath(fromObject, ['maxItems']);
  if (fromMaxItems != null) {
    common.setValueByPath(toObject, ['maxItems'], fromMaxItems);
  }

  const fromMaximum = common.getValueByPath(fromObject, ['maximum']);
  if (fromMaximum != null) {
    common.setValueByPath(toObject, ['maximum'], fromMaximum);
  }

  const fromMinItems = common.getValueByPath(fromObject, ['minItems']);
  if (fromMinItems != null) {
    common.setValueByPath(toObject, ['minItems'], fromMinItems);
  }

  const fromMinimum = common.getValueByPath(fromObject, ['minimum']);
  if (fromMinimum != null) {
    common.setValueByPath(toObject, ['minimum'], fromMinimum);
  }

  const fromNullable = common.getValueByPath(fromObject, ['nullable']);
  if (fromNullable != null) {
    common.setValueByPath(toObject, ['nullable'], fromNullable);
  }

  const fromProperties = common.getValueByPath(fromObject, ['properties']);
  if (fromProperties != null) {
    common.setValueByPath(toObject, ['properties'], fromProperties);
  }

  const fromPropertyOrdering = common.getValueByPath(fromObject, [
    'propertyOrdering',
  ]);
  if (fromPropertyOrdering != null) {
    common.setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);
  }

  const fromRequired = common.getValueByPath(fromObject, ['required']);
  if (fromRequired != null) {
    common.setValueByPath(toObject, ['required'], fromRequired);
  }

  const fromTitle = common.getValueByPath(fromObject, ['title']);
  if (fromTitle != null) {
    common.setValueByPath(toObject, ['title'], fromTitle);
  }

  const fromType = common.getValueByPath(fromObject, ['type']);
  if (fromType != null) {
    common.setValueByPath(toObject, ['type'], fromType);
  }

  return toObject;
}

export function modelSelectionConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.ModelSelectionConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromFeatureSelectionPreference = common.getValueByPath(fromObject, [
    'featureSelectionPreference',
  ]);
  if (fromFeatureSelectionPreference != null) {
    common.setValueByPath(
      toObject,
      ['featureSelectionPreference'],
      fromFeatureSelectionPreference,
    );
  }

  return toObject;
}

export function safetySettingToVertex(
  apiClient: ApiClient,
  fromObject: types.SafetySetting,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromMethod = common.getValueByPath(fromObject, ['method']);
  if (fromMethod != null) {
    common.setValueByPath(toObject, ['method'], fromMethod);
  }

  const fromCategory = common.getValueByPath(fromObject, ['category']);
  if (fromCategory != null) {
    common.setValueByPath(toObject, ['category'], fromCategory);
  }

  const fromThreshold = common.getValueByPath(fromObject, ['threshold']);
  if (fromThreshold != null) {
    common.setValueByPath(toObject, ['threshold'], fromThreshold);
  }

  return toObject;
}

export function functionDeclarationToVertex(
  apiClient: ApiClient,
  fromObject: types.FunctionDeclaration,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromResponse = common.getValueByPath(fromObject, ['response']);
  if (fromResponse != null) {
    common.setValueByPath(
      toObject,
      ['response'],
      schemaToVertex(apiClient, fromResponse),
    );
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription != null) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName != null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromParameters = common.getValueByPath(fromObject, ['parameters']);
  if (fromParameters != null) {
    common.setValueByPath(toObject, ['parameters'], fromParameters);
  }

  return toObject;
}

export function googleSearchToVertex(): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  return toObject;
}

export function dynamicRetrievalConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.DynamicRetrievalConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode != null) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromDynamicThreshold = common.getValueByPath(fromObject, [
    'dynamicThreshold',
  ]);
  if (fromDynamicThreshold != null) {
    common.setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);
  }

  return toObject;
}

export function googleSearchRetrievalToVertex(
  apiClient: ApiClient,
  fromObject: types.GoogleSearchRetrieval,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromDynamicRetrievalConfig = common.getValueByPath(fromObject, [
    'dynamicRetrievalConfig',
  ]);
  if (fromDynamicRetrievalConfig != null) {
    common.setValueByPath(
      toObject,
      ['dynamicRetrievalConfig'],
      dynamicRetrievalConfigToVertex(apiClient, fromDynamicRetrievalConfig),
    );
  }

  return toObject;
}

export function toolToVertex(
  apiClient: ApiClient,
  fromObject: types.Tool,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromFunctionDeclarations = common.getValueByPath(fromObject, [
    'functionDeclarations',
  ]);
  if (fromFunctionDeclarations != null) {
    if (Array.isArray(fromFunctionDeclarations)) {
      common.setValueByPath(
        toObject,
        ['functionDeclarations'],
        fromFunctionDeclarations.map((item) => {
          return functionDeclarationToVertex(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(
        toObject,
        ['functionDeclarations'],
        fromFunctionDeclarations,
      );
    }
  }

  const fromRetrieval = common.getValueByPath(fromObject, ['retrieval']);
  if (fromRetrieval != null) {
    common.setValueByPath(toObject, ['retrieval'], fromRetrieval);
  }

  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);
  if (fromGoogleSearch != null) {
    common.setValueByPath(toObject, ['googleSearch'], googleSearchToVertex());
  }

  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [
    'googleSearchRetrieval',
  ]);
  if (fromGoogleSearchRetrieval != null) {
    common.setValueByPath(
      toObject,
      ['googleSearchRetrieval'],
      googleSearchRetrievalToVertex(apiClient, fromGoogleSearchRetrieval),
    );
  }

  const fromCodeExecution = common.getValueByPath(fromObject, [
    'codeExecution',
  ]);
  if (fromCodeExecution != null) {
    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);
  }

  return toObject;
}

export function functionCallingConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.FunctionCallingConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode != null) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromAllowedFunctionNames = common.getValueByPath(fromObject, [
    'allowedFunctionNames',
  ]);
  if (fromAllowedFunctionNames != null) {
    common.setValueByPath(
      toObject,
      ['allowedFunctionNames'],
      fromAllowedFunctionNames,
    );
  }

  return toObject;
}

export function toolConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.ToolConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromFunctionCallingConfig = common.getValueByPath(fromObject, [
    'functionCallingConfig',
  ]);
  if (fromFunctionCallingConfig != null) {
    common.setValueByPath(
      toObject,
      ['functionCallingConfig'],
      functionCallingConfigToVertex(apiClient, fromFunctionCallingConfig),
    );
  }

  return toObject;
}

export function prebuiltVoiceConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.PrebuiltVoiceConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromVoiceName = common.getValueByPath(fromObject, ['voiceName']);
  if (fromVoiceName != null) {
    common.setValueByPath(toObject, ['voiceName'], fromVoiceName);
  }

  return toObject;
}

export function voiceConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.VoiceConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromPrebuiltVoiceConfig = common.getValueByPath(fromObject, [
    'prebuiltVoiceConfig',
  ]);
  if (fromPrebuiltVoiceConfig != null) {
    common.setValueByPath(
      toObject,
      ['prebuiltVoiceConfig'],
      prebuiltVoiceConfigToVertex(apiClient, fromPrebuiltVoiceConfig),
    );
  }

  return toObject;
}

export function speechConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.SpeechConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromVoiceConfig = common.getValueByPath(fromObject, ['voiceConfig']);
  if (fromVoiceConfig != null) {
    common.setValueByPath(
      toObject,
      ['voiceConfig'],
      voiceConfigToVertex(apiClient, fromVoiceConfig),
    );
  }

  const fromLanguageCode = common.getValueByPath(fromObject, ['languageCode']);
  if (fromLanguageCode != null) {
    common.setValueByPath(toObject, ['languageCode'], fromLanguageCode);
  }

  return toObject;
}

export function thinkingConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.ThinkingConfig,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromIncludeThoughts = common.getValueByPath(fromObject, [
    'includeThoughts',
  ]);
  if (fromIncludeThoughts != null) {
    common.setValueByPath(toObject, ['includeThoughts'], fromIncludeThoughts);
  }

  const fromThinkingBudget = common.getValueByPath(fromObject, [
    'thinkingBudget',
  ]);
  if (fromThinkingBudget != null) {
    common.setValueByPath(toObject, ['thinkingBudget'], fromThinkingBudget);
  }

  return toObject;
}

export function generateContentConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateContentConfig,
  parentObject: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromSystemInstruction = common.getValueByPath(fromObject, [
    'systemInstruction',
  ]);
  if (parentObject !== undefined && fromSystemInstruction != null) {
    common.setValueByPath(
      parentObject,
      ['systemInstruction'],
      contentToVertex(apiClient, t.tContent(apiClient, fromSystemInstruction)),
    );
  }

  const fromTemperature = common.getValueByPath(fromObject, ['temperature']);
  if (fromTemperature != null) {
    common.setValueByPath(toObject, ['temperature'], fromTemperature);
  }

  const fromTopP = common.getValueByPath(fromObject, ['topP']);
  if (fromTopP != null) {
    common.setValueByPath(toObject, ['topP'], fromTopP);
  }

  const fromTopK = common.getValueByPath(fromObject, ['topK']);
  if (fromTopK != null) {
    common.setValueByPath(toObject, ['topK'], fromTopK);
  }

  const fromCandidateCount = common.getValueByPath(fromObject, [
    'candidateCount',
  ]);
  if (fromCandidateCount != null) {
    common.setValueByPath(toObject, ['candidateCount'], fromCandidateCount);
  }

  const fromMaxOutputTokens = common.getValueByPath(fromObject, [
    'maxOutputTokens',
  ]);
  if (fromMaxOutputTokens != null) {
    common.setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);
  }

  const fromStopSequences = common.getValueByPath(fromObject, [
    'stopSequences',
  ]);
  if (fromStopSequences != null) {
    common.setValueByPath(toObject, ['stopSequences'], fromStopSequences);
  }

  const fromResponseLogprobs = common.getValueByPath(fromObject, [
    'responseLogprobs',
  ]);
  if (fromResponseLogprobs != null) {
    common.setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);
  }

  const fromLogprobs = common.getValueByPath(fromObject, ['logprobs']);
  if (fromLogprobs != null) {
    common.setValueByPath(toObject, ['logprobs'], fromLogprobs);
  }

  const fromPresencePenalty = common.getValueByPath(fromObject, [
    'presencePenalty',
  ]);
  if (fromPresencePenalty != null) {
    common.setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);
  }

  const fromFrequencyPenalty = common.getValueByPath(fromObject, [
    'frequencyPenalty',
  ]);
  if (fromFrequencyPenalty != null) {
    common.setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);
  }

  const fromSeed = common.getValueByPath(fromObject, ['seed']);
  if (fromSeed != null) {
    common.setValueByPath(toObject, ['seed'], fromSeed);
  }

  const fromResponseMimeType = common.getValueByPath(fromObject, [
    'responseMimeType',
  ]);
  if (fromResponseMimeType != null) {
    common.setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);
  }

  const fromResponseSchema = common.getValueByPath(fromObject, [
    'responseSchema',
  ]);
  if (fromResponseSchema != null) {
    common.setValueByPath(
      toObject,
      ['responseSchema'],
      schemaToVertex(apiClient, t.tSchema(apiClient, fromResponseSchema)),
    );
  }

  const fromRoutingConfig = common.getValueByPath(fromObject, [
    'routingConfig',
  ]);
  if (fromRoutingConfig != null) {
    common.setValueByPath(toObject, ['routingConfig'], fromRoutingConfig);
  }

  const fromModelSelectionConfig = common.getValueByPath(fromObject, [
    'modelSelectionConfig',
  ]);
  if (fromModelSelectionConfig != null) {
    common.setValueByPath(
      toObject,
      ['modelConfig'],
      modelSelectionConfigToVertex(apiClient, fromModelSelectionConfig),
    );
  }

  const fromSafetySettings = common.getValueByPath(fromObject, [
    'safetySettings',
  ]);
  if (parentObject !== undefined && fromSafetySettings != null) {
    if (Array.isArray(fromSafetySettings)) {
      common.setValueByPath(
        parentObject,
        ['safetySettings'],
        fromSafetySettings.map((item) => {
          return safetySettingToVertex(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(
        parentObject,
        ['safetySettings'],
        fromSafetySettings,
      );
    }
  }

  const fromTools = common.getValueByPath(fromObject, ['tools']);
  if (parentObject !== undefined && fromTools != null) {
    if (Array.isArray(fromTools)) {
      common.setValueByPath(
        parentObject,
        ['tools'],
        t.tTools(
          apiClient,
          t.tTools(apiClient, fromTools).map((item) => {
            return toolToVertex(apiClient, t.tTool(apiClient, item));
          }),
        ),
      );
    } else {
      common.setValueByPath(
        parentObject,
        ['tools'],
        t.tTools(apiClient, fromTools),
      );
    }
  }

  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);
  if (parentObject !== undefined && fromToolConfig != null) {
    common.setValueByPath(
      parentObject,
      ['toolConfig'],
      toolConfigToVertex(apiClient, fromToolConfig),
    );
  }

  const fromLabels = common.getValueByPath(fromObject, ['labels']);
  if (parentObject !== undefined && fromLabels != null) {
    common.setValueByPath(parentObject, ['labels'], fromLabels);
  }

  const fromCachedContent = common.getValueByPath(fromObject, [
    'cachedContent',
  ]);
  if (parentObject !== undefined && fromCachedContent != null) {
    common.setValueByPath(
      parentObject,
      ['cachedContent'],
      t.tCachedContentName(apiClient, fromCachedContent),
    );
  }

  const fromResponseModalities = common.getValueByPath(fromObject, [
    'responseModalities',
  ]);
  if (fromResponseModalities != null) {
    common.setValueByPath(
      toObject,
      ['responseModalities'],
      fromResponseModalities,
    );
  }

  const fromMediaResolution = common.getValueByPath(fromObject, [
    'mediaResolution',
  ]);
  if (fromMediaResolution != null) {
    common.setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);
  }

  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);
  if (fromSpeechConfig != null) {
    common.setValueByPath(
      toObject,
      ['speechConfig'],
      speechConfigToVertex(
        apiClient,
        t.tSpeechConfig(apiClient, fromSpeechConfig),
      ),
    );
  }

  const fromAudioTimestamp = common.getValueByPath(fromObject, [
    'audioTimestamp',
  ]);
  if (fromAudioTimestamp != null) {
    common.setValueByPath(toObject, ['audioTimestamp'], fromAudioTimestamp);
  }

  const fromThinkingConfig = common.getValueByPath(fromObject, [
    'thinkingConfig',
  ]);
  if (fromThinkingConfig != null) {
    common.setValueByPath(
      toObject,
      ['thinkingConfig'],
      thinkingConfigToVertex(apiClient, fromThinkingConfig),
    );
  }

  return toObject;
}

export function generateContentParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateContentParameters,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel != null) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (fromContents != null) {
    if (Array.isArray(fromContents)) {
      common.setValueByPath(
        toObject,
        ['contents'],
        t.tContents(
          apiClient,
          t.tContents(apiClient, fromContents).map((item) => {
            return contentToVertex(apiClient, item);
          }),
        ),
      );
    } else {
      common.setValueByPath(
        toObject,
        ['contents'],
        t.tContents(apiClient, fromContents),
      );
    }
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    common.setValueByPath(
      toObject,
      ['generationConfig'],
      generateContentConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

export function embedContentConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.EmbedContentConfig,
  parentObject: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromTaskType = common.getValueByPath(fromObject, ['taskType']);
  if (parentObject !== undefined && fromTaskType != null) {
    common.setValueByPath(
      parentObject,
      ['instances[]', 'task_type'],
      fromTaskType,
    );
  }

  const fromTitle = common.getValueByPath(fromObject, ['title']);
  if (parentObject !== undefined && fromTitle != null) {
    common.setValueByPath(parentObject, ['instances[]', 'title'], fromTitle);
  }

  const fromOutputDimensionality = common.getValueByPath(fromObject, [
    'outputDimensionality',
  ]);
  if (parentObject !== undefined && fromOutputDimensionality != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'outputDimensionality'],
      fromOutputDimensionality,
    );
  }

  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);
  if (parentObject !== undefined && fromMimeType != null) {
    common.setValueByPath(
      parentObject,
      ['instances[]', 'mimeType'],
      fromMimeType,
    );
  }

  const fromAutoTruncate = common.getValueByPath(fromObject, ['autoTruncate']);
  if (parentObject !== undefined && fromAutoTruncate != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'autoTruncate'],
      fromAutoTruncate,
    );
  }

  return toObject;
}

export function embedContentParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.EmbedContentParameters,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel != null) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (fromContents != null) {
    common.setValueByPath(
      toObject,
      ['instances[]', 'content'],
      t.tContentsForEmbed(apiClient, fromContents),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    common.setValueByPath(
      toObject,
      ['config'],
      embedContentConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

export function generateImagesConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateImagesConfig,
  parentObject: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromOutputGcsUri = common.getValueByPath(fromObject, ['outputGcsUri']);
  if (parentObject !== undefined && fromOutputGcsUri != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'storageUri'],
      fromOutputGcsUri,
    );
  }

  const fromNegativePrompt = common.getValueByPath(fromObject, [
    'negativePrompt',
  ]);
  if (parentObject !== undefined && fromNegativePrompt != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'negativePrompt'],
      fromNegativePrompt,
    );
  }

  const fromNumberOfImages = common.getValueByPath(fromObject, [
    'numberOfImages',
  ]);
  if (parentObject !== undefined && fromNumberOfImages != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'sampleCount'],
      fromNumberOfImages,
    );
  }

  const fromAspectRatio = common.getValueByPath(fromObject, ['aspectRatio']);
  if (parentObject !== undefined && fromAspectRatio != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'aspectRatio'],
      fromAspectRatio,
    );
  }

  const fromGuidanceScale = common.getValueByPath(fromObject, [
    'guidanceScale',
  ]);
  if (parentObject !== undefined && fromGuidanceScale != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'guidanceScale'],
      fromGuidanceScale,
    );
  }

  const fromSeed = common.getValueByPath(fromObject, ['seed']);
  if (parentObject !== undefined && fromSeed != null) {
    common.setValueByPath(parentObject, ['parameters', 'seed'], fromSeed);
  }

  const fromSafetyFilterLevel = common.getValueByPath(fromObject, [
    'safetyFilterLevel',
  ]);
  if (parentObject !== undefined && fromSafetyFilterLevel != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'safetySetting'],
      fromSafetyFilterLevel,
    );
  }

  const fromPersonGeneration = common.getValueByPath(fromObject, [
    'personGeneration',
  ]);
  if (parentObject !== undefined && fromPersonGeneration != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'personGeneration'],
      fromPersonGeneration,
    );
  }

  const fromIncludeSafetyAttributes = common.getValueByPath(fromObject, [
    'includeSafetyAttributes',
  ]);
  if (parentObject !== undefined && fromIncludeSafetyAttributes != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'includeSafetyAttributes'],
      fromIncludeSafetyAttributes,
    );
  }

  const fromIncludeRaiReason = common.getValueByPath(fromObject, [
    'includeRaiReason',
  ]);
  if (parentObject !== undefined && fromIncludeRaiReason != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'includeRaiReason'],
      fromIncludeRaiReason,
    );
  }

  const fromLanguage = common.getValueByPath(fromObject, ['language']);
  if (parentObject !== undefined && fromLanguage != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'language'],
      fromLanguage,
    );
  }

  const fromOutputMimeType = common.getValueByPath(fromObject, [
    'outputMimeType',
  ]);
  if (parentObject !== undefined && fromOutputMimeType != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'outputOptions', 'mimeType'],
      fromOutputMimeType,
    );
  }

  const fromOutputCompressionQuality = common.getValueByPath(fromObject, [
    'outputCompressionQuality',
  ]);
  if (parentObject !== undefined && fromOutputCompressionQuality != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'outputOptions', 'compressionQuality'],
      fromOutputCompressionQuality,
    );
  }

  const fromAddWatermark = common.getValueByPath(fromObject, ['addWatermark']);
  if (parentObject !== undefined && fromAddWatermark != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'addWatermark'],
      fromAddWatermark,
    );
  }

  const fromEnhancePrompt = common.getValueByPath(fromObject, [
    'enhancePrompt',
  ]);
  if (parentObject !== undefined && fromEnhancePrompt != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'enhancePrompt'],
      fromEnhancePrompt,
    );
  }

  return toObject;
}

export function generateImagesParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateImagesParameters,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel != null) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);
  if (fromPrompt != null) {
    common.setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    common.setValueByPath(
      toObject,
      ['config'],
      generateImagesConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

export function getModelParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.GetModelParameters,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel != null) {
    common.setValueByPath(
      toObject,
      ['_url', 'name'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

export function countTokensConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.CountTokensConfig,
  parentObject: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromSystemInstruction = common.getValueByPath(fromObject, [
    'systemInstruction',
  ]);
  if (parentObject !== undefined && fromSystemInstruction != null) {
    common.setValueByPath(
      parentObject,
      ['systemInstruction'],
      contentToVertex(apiClient, t.tContent(apiClient, fromSystemInstruction)),
    );
  }

  const fromTools = common.getValueByPath(fromObject, ['tools']);
  if (parentObject !== undefined && fromTools != null) {
    if (Array.isArray(fromTools)) {
      common.setValueByPath(
        parentObject,
        ['tools'],
        fromTools.map((item) => {
          return toolToVertex(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(parentObject, ['tools'], fromTools);
    }
  }

  const fromGenerationConfig = common.getValueByPath(fromObject, [
    'generationConfig',
  ]);
  if (parentObject !== undefined && fromGenerationConfig != null) {
    common.setValueByPath(
      parentObject,
      ['generationConfig'],
      fromGenerationConfig,
    );
  }

  return toObject;
}

export function countTokensParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.CountTokensParameters,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel != null) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (fromContents != null) {
    if (Array.isArray(fromContents)) {
      common.setValueByPath(
        toObject,
        ['contents'],
        t.tContents(
          apiClient,
          t.tContents(apiClient, fromContents).map((item) => {
            return contentToVertex(apiClient, item);
          }),
        ),
      );
    } else {
      common.setValueByPath(
        toObject,
        ['contents'],
        t.tContents(apiClient, fromContents),
      );
    }
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    common.setValueByPath(
      toObject,
      ['config'],
      countTokensConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

export function computeTokensParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.ComputeTokensParameters,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel != null) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (fromContents != null) {
    if (Array.isArray(fromContents)) {
      common.setValueByPath(
        toObject,
        ['contents'],
        t.tContents(
          apiClient,
          t.tContents(apiClient, fromContents).map((item) => {
            return contentToVertex(apiClient, item);
          }),
        ),
      );
    } else {
      common.setValueByPath(
        toObject,
        ['contents'],
        t.tContents(apiClient, fromContents),
      );
    }
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

export function imageToVertex(
  apiClient: ApiClient,
  fromObject: types.Image,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromGcsUri = common.getValueByPath(fromObject, ['gcsUri']);
  if (fromGcsUri != null) {
    common.setValueByPath(toObject, ['gcsUri'], fromGcsUri);
  }

  const fromImageBytes = common.getValueByPath(fromObject, ['imageBytes']);
  if (fromImageBytes != null) {
    common.setValueByPath(
      toObject,
      ['bytesBase64Encoded'],
      t.tBytes(apiClient, fromImageBytes),
    );
  }

  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);
  if (fromMimeType != null) {
    common.setValueByPath(toObject, ['mimeType'], fromMimeType);
  }

  return toObject;
}

export function generateVideosConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateVideosConfig,
  parentObject: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromNumberOfVideos = common.getValueByPath(fromObject, [
    'numberOfVideos',
  ]);
  if (parentObject !== undefined && fromNumberOfVideos != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'sampleCount'],
      fromNumberOfVideos,
    );
  }

  const fromOutputGcsUri = common.getValueByPath(fromObject, ['outputGcsUri']);
  if (parentObject !== undefined && fromOutputGcsUri != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'storageUri'],
      fromOutputGcsUri,
    );
  }

  const fromFps = common.getValueByPath(fromObject, ['fps']);
  if (parentObject !== undefined && fromFps != null) {
    common.setValueByPath(parentObject, ['parameters', 'fps'], fromFps);
  }

  const fromDurationSeconds = common.getValueByPath(fromObject, [
    'durationSeconds',
  ]);
  if (parentObject !== undefined && fromDurationSeconds != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'durationSeconds'],
      fromDurationSeconds,
    );
  }

  const fromSeed = common.getValueByPath(fromObject, ['seed']);
  if (parentObject !== undefined && fromSeed != null) {
    common.setValueByPath(parentObject, ['parameters', 'seed'], fromSeed);
  }

  const fromAspectRatio = common.getValueByPath(fromObject, ['aspectRatio']);
  if (parentObject !== undefined && fromAspectRatio != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'aspectRatio'],
      fromAspectRatio,
    );
  }

  const fromResolution = common.getValueByPath(fromObject, ['resolution']);
  if (parentObject !== undefined && fromResolution != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'resolution'],
      fromResolution,
    );
  }

  const fromPersonGeneration = common.getValueByPath(fromObject, [
    'personGeneration',
  ]);
  if (parentObject !== undefined && fromPersonGeneration != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'personGeneration'],
      fromPersonGeneration,
    );
  }

  const fromPubsubTopic = common.getValueByPath(fromObject, ['pubsubTopic']);
  if (parentObject !== undefined && fromPubsubTopic != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'pubsubTopic'],
      fromPubsubTopic,
    );
  }

  const fromNegativePrompt = common.getValueByPath(fromObject, [
    'negativePrompt',
  ]);
  if (parentObject !== undefined && fromNegativePrompt != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'negativePrompt'],
      fromNegativePrompt,
    );
  }

  const fromEnhancePrompt = common.getValueByPath(fromObject, [
    'enhancePrompt',
  ]);
  if (parentObject !== undefined && fromEnhancePrompt != null) {
    common.setValueByPath(
      parentObject,
      ['parameters', 'enhancePrompt'],
      fromEnhancePrompt,
    );
  }

  return toObject;
}

export function generateVideosParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateVideosParameters,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel != null) {
    common.setValueByPath(
      toObject,
      ['_url', 'model'],
      t.tModel(apiClient, fromModel),
    );
  }

  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);
  if (fromPrompt != null) {
    common.setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);
  }

  const fromImage = common.getValueByPath(fromObject, ['image']);
  if (fromImage != null) {
    common.setValueByPath(
      toObject,
      ['instances[0]', 'image'],
      imageToVertex(apiClient, fromImage),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig != null) {
    common.setValueByPath(
      toObject,
      ['config'],
      generateVideosConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

export function partFromMldev(
  apiClient: ApiClient,
  fromObject: types.Part,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromThought = common.getValueByPath(fromObject, ['thought']);
  if (fromThought != null) {
    common.setValueByPath(toObject, ['thought'], fromThought);
  }

  const fromCodeExecutionResult = common.getValueByPath(fromObject, [
    'codeExecutionResult',
  ]);
  if (fromCodeExecutionResult != null) {
    common.setValueByPath(
      toObject,
      ['codeExecutionResult'],
      fromCodeExecutionResult,
    );
  }

  const fromExecutableCode = common.getValueByPath(fromObject, [
    'executableCode',
  ]);
  if (fromExecutableCode != null) {
    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);
  }

  const fromFileData = common.getValueByPath(fromObject, ['fileData']);
  if (fromFileData != null) {
    common.setValueByPath(toObject, ['fileData'], fromFileData);
  }

  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);
  if (fromFunctionCall != null) {
    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);
  }

  const fromFunctionResponse = common.getValueByPath(fromObject, [
    'functionResponse',
  ]);
  if (fromFunctionResponse != null) {
    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);
  }

  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);
  if (fromInlineData != null) {
    common.setValueByPath(toObject, ['inlineData'], fromInlineData);
  }

  const fromText = common.getValueByPath(fromObject, ['text']);
  if (fromText != null) {
    common.setValueByPath(toObject, ['text'], fromText);
  }

  return toObject;
}

export function contentFromMldev(
  apiClient: ApiClient,
  fromObject: types.Content,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromParts = common.getValueByPath(fromObject, ['parts']);
  if (fromParts != null) {
    if (Array.isArray(fromParts)) {
      common.setValueByPath(
        toObject,
        ['parts'],
        fromParts.map((item) => {
          return partFromMldev(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(toObject, ['parts'], fromParts);
    }
  }

  const fromRole = common.getValueByPath(fromObject, ['role']);
  if (fromRole != null) {
    common.setValueByPath(toObject, ['role'], fromRole);
  }

  return toObject;
}

export function citationMetadataFromMldev(
  apiClient: ApiClient,
  fromObject: types.CitationMetadata,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromCitations = common.getValueByPath(fromObject, ['citationSources']);
  if (fromCitations != null) {
    common.setValueByPath(toObject, ['citations'], fromCitations);
  }

  return toObject;
}

export function candidateFromMldev(
  apiClient: ApiClient,
  fromObject: types.Candidate,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromContent = common.getValueByPath(fromObject, ['content']);
  if (fromContent != null) {
    common.setValueByPath(
      toObject,
      ['content'],
      contentFromMldev(apiClient, fromContent),
    );
  }

  const fromCitationMetadata = common.getValueByPath(fromObject, [
    'citationMetadata',
  ]);
  if (fromCitationMetadata != null) {
    common.setValueByPath(
      toObject,
      ['citationMetadata'],
      citationMetadataFromMldev(apiClient, fromCitationMetadata),
    );
  }

  const fromTokenCount = common.getValueByPath(fromObject, ['tokenCount']);
  if (fromTokenCount != null) {
    common.setValueByPath(toObject, ['tokenCount'], fromTokenCount);
  }

  const fromFinishReason = common.getValueByPath(fromObject, ['finishReason']);
  if (fromFinishReason != null) {
    common.setValueByPath(toObject, ['finishReason'], fromFinishReason);
  }

  const fromAvgLogprobs = common.getValueByPath(fromObject, ['avgLogprobs']);
  if (fromAvgLogprobs != null) {
    common.setValueByPath(toObject, ['avgLogprobs'], fromAvgLogprobs);
  }

  const fromGroundingMetadata = common.getValueByPath(fromObject, [
    'groundingMetadata',
  ]);
  if (fromGroundingMetadata != null) {
    common.setValueByPath(
      toObject,
      ['groundingMetadata'],
      fromGroundingMetadata,
    );
  }

  const fromIndex = common.getValueByPath(fromObject, ['index']);
  if (fromIndex != null) {
    common.setValueByPath(toObject, ['index'], fromIndex);
  }

  const fromLogprobsResult = common.getValueByPath(fromObject, [
    'logprobsResult',
  ]);
  if (fromLogprobsResult != null) {
    common.setValueByPath(toObject, ['logprobsResult'], fromLogprobsResult);
  }

  const fromSafetyRatings = common.getValueByPath(fromObject, [
    'safetyRatings',
  ]);
  if (fromSafetyRatings != null) {
    common.setValueByPath(toObject, ['safetyRatings'], fromSafetyRatings);
  }

  return toObject;
}

export function generateContentResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateContentResponse,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromCandidates = common.getValueByPath(fromObject, ['candidates']);
  if (fromCandidates != null) {
    if (Array.isArray(fromCandidates)) {
      common.setValueByPath(
        toObject,
        ['candidates'],
        fromCandidates.map((item) => {
          return candidateFromMldev(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(toObject, ['candidates'], fromCandidates);
    }
  }

  const fromModelVersion = common.getValueByPath(fromObject, ['modelVersion']);
  if (fromModelVersion != null) {
    common.setValueByPath(toObject, ['modelVersion'], fromModelVersion);
  }

  const fromPromptFeedback = common.getValueByPath(fromObject, [
    'promptFeedback',
  ]);
  if (fromPromptFeedback != null) {
    common.setValueByPath(toObject, ['promptFeedback'], fromPromptFeedback);
  }

  const fromUsageMetadata = common.getValueByPath(fromObject, [
    'usageMetadata',
  ]);
  if (fromUsageMetadata != null) {
    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);
  }

  return toObject;
}

export function contentEmbeddingStatisticsFromMldev(): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  return toObject;
}

export function contentEmbeddingFromMldev(
  apiClient: ApiClient,
  fromObject: types.ContentEmbedding,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromValues = common.getValueByPath(fromObject, ['values']);
  if (fromValues != null) {
    common.setValueByPath(toObject, ['values'], fromValues);
  }

  return toObject;
}

export function embedContentMetadataFromMldev(): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  return toObject;
}

export function embedContentResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.EmbedContentResponse,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromEmbeddings = common.getValueByPath(fromObject, ['embeddings']);
  if (fromEmbeddings != null) {
    if (Array.isArray(fromEmbeddings)) {
      common.setValueByPath(
        toObject,
        ['embeddings'],
        fromEmbeddings.map((item) => {
          return contentEmbeddingFromMldev(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(toObject, ['embeddings'], fromEmbeddings);
    }
  }

  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);
  if (fromMetadata != null) {
    common.setValueByPath(
      toObject,
      ['metadata'],
      embedContentMetadataFromMldev(),
    );
  }

  return toObject;
}

export function imageFromMldev(
  apiClient: ApiClient,
  fromObject: types.Image,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromImageBytes = common.getValueByPath(fromObject, [
    'bytesBase64Encoded',
  ]);
  if (fromImageBytes != null) {
    common.setValueByPath(
      toObject,
      ['imageBytes'],
      t.tBytes(apiClient, fromImageBytes),
    );
  }

  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);
  if (fromMimeType != null) {
    common.setValueByPath(toObject, ['mimeType'], fromMimeType);
  }

  return toObject;
}

export function safetyAttributesFromMldev(
  apiClient: ApiClient,
  fromObject: types.SafetyAttributes,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromCategories = common.getValueByPath(fromObject, [
    'safetyAttributes',
    'categories',
  ]);
  if (fromCategories != null) {
    common.setValueByPath(toObject, ['categories'], fromCategories);
  }

  const fromScores = common.getValueByPath(fromObject, [
    'safetyAttributes',
    'scores',
  ]);
  if (fromScores != null) {
    common.setValueByPath(toObject, ['scores'], fromScores);
  }

  const fromContentType = common.getValueByPath(fromObject, ['contentType']);
  if (fromContentType != null) {
    common.setValueByPath(toObject, ['contentType'], fromContentType);
  }

  return toObject;
}

export function generatedImageFromMldev(
  apiClient: ApiClient,
  fromObject: types.GeneratedImage,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromImage = common.getValueByPath(fromObject, ['_self']);
  if (fromImage != null) {
    common.setValueByPath(
      toObject,
      ['image'],
      imageFromMldev(apiClient, fromImage),
    );
  }

  const fromRaiFilteredReason = common.getValueByPath(fromObject, [
    'raiFilteredReason',
  ]);
  if (fromRaiFilteredReason != null) {
    common.setValueByPath(
      toObject,
      ['raiFilteredReason'],
      fromRaiFilteredReason,
    );
  }

  const fromSafetyAttributes = common.getValueByPath(fromObject, ['_self']);
  if (fromSafetyAttributes != null) {
    common.setValueByPath(
      toObject,
      ['safetyAttributes'],
      safetyAttributesFromMldev(apiClient, fromSafetyAttributes),
    );
  }

  return toObject;
}

export function generateImagesResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateImagesResponse,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromGeneratedImages = common.getValueByPath(fromObject, [
    'predictions',
  ]);
  if (fromGeneratedImages != null) {
    if (Array.isArray(fromGeneratedImages)) {
      common.setValueByPath(
        toObject,
        ['generatedImages'],
        fromGeneratedImages.map((item) => {
          return generatedImageFromMldev(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(toObject, ['generatedImages'], fromGeneratedImages);
    }
  }

  const fromPositivePromptSafetyAttributes = common.getValueByPath(fromObject, [
    'positivePromptSafetyAttributes',
  ]);
  if (fromPositivePromptSafetyAttributes != null) {
    common.setValueByPath(
      toObject,
      ['positivePromptSafetyAttributes'],
      safetyAttributesFromMldev(apiClient, fromPositivePromptSafetyAttributes),
    );
  }

  return toObject;
}

export function endpointFromMldev(): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  return toObject;
}

export function tunedModelInfoFromMldev(
  apiClient: ApiClient,
  fromObject: types.TunedModelInfo,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromBaseModel = common.getValueByPath(fromObject, ['baseModel']);
  if (fromBaseModel != null) {
    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);
  }

  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime != null) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);
  if (fromUpdateTime != null) {
    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);
  }

  return toObject;
}

export function modelFromMldev(
  apiClient: ApiClient,
  fromObject: types.Model,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName != null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);
  if (fromDisplayName != null) {
    common.setValueByPath(toObject, ['displayName'], fromDisplayName);
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription != null) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromVersion = common.getValueByPath(fromObject, ['version']);
  if (fromVersion != null) {
    common.setValueByPath(toObject, ['version'], fromVersion);
  }

  const fromTunedModelInfo = common.getValueByPath(fromObject, ['_self']);
  if (fromTunedModelInfo != null) {
    common.setValueByPath(
      toObject,
      ['tunedModelInfo'],
      tunedModelInfoFromMldev(apiClient, fromTunedModelInfo),
    );
  }

  const fromInputTokenLimit = common.getValueByPath(fromObject, [
    'inputTokenLimit',
  ]);
  if (fromInputTokenLimit != null) {
    common.setValueByPath(toObject, ['inputTokenLimit'], fromInputTokenLimit);
  }

  const fromOutputTokenLimit = common.getValueByPath(fromObject, [
    'outputTokenLimit',
  ]);
  if (fromOutputTokenLimit != null) {
    common.setValueByPath(toObject, ['outputTokenLimit'], fromOutputTokenLimit);
  }

  const fromSupportedActions = common.getValueByPath(fromObject, [
    'supportedGenerationMethods',
  ]);
  if (fromSupportedActions != null) {
    common.setValueByPath(toObject, ['supportedActions'], fromSupportedActions);
  }

  return toObject;
}

export function countTokensResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.CountTokensResponse,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromTotalTokens = common.getValueByPath(fromObject, ['totalTokens']);
  if (fromTotalTokens != null) {
    common.setValueByPath(toObject, ['totalTokens'], fromTotalTokens);
  }

  const fromCachedContentTokenCount = common.getValueByPath(fromObject, [
    'cachedContentTokenCount',
  ]);
  if (fromCachedContentTokenCount != null) {
    common.setValueByPath(
      toObject,
      ['cachedContentTokenCount'],
      fromCachedContentTokenCount,
    );
  }

  return toObject;
}

export function videoFromMldev(
  apiClient: ApiClient,
  fromObject: types.Video,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromUri = common.getValueByPath(fromObject, ['video', 'uri']);
  if (fromUri != null) {
    common.setValueByPath(toObject, ['uri'], fromUri);
  }

  const fromVideoBytes = common.getValueByPath(fromObject, [
    'video',
    'encodedVideo',
  ]);
  if (fromVideoBytes != null) {
    common.setValueByPath(
      toObject,
      ['videoBytes'],
      t.tBytes(apiClient, fromVideoBytes),
    );
  }

  const fromMimeType = common.getValueByPath(fromObject, ['encoding']);
  if (fromMimeType != null) {
    common.setValueByPath(toObject, ['mimeType'], fromMimeType);
  }

  return toObject;
}

export function generatedVideoFromMldev(
  apiClient: ApiClient,
  fromObject: types.GeneratedVideo,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromVideo = common.getValueByPath(fromObject, ['_self']);
  if (fromVideo != null) {
    common.setValueByPath(
      toObject,
      ['video'],
      videoFromMldev(apiClient, fromVideo),
    );
  }

  return toObject;
}

export function generateVideosResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateVideosResponse,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromGeneratedVideos = common.getValueByPath(fromObject, [
    'generatedSamples',
  ]);
  if (fromGeneratedVideos != null) {
    if (Array.isArray(fromGeneratedVideos)) {
      common.setValueByPath(
        toObject,
        ['generatedVideos'],
        fromGeneratedVideos.map((item) => {
          return generatedVideoFromMldev(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(toObject, ['generatedVideos'], fromGeneratedVideos);
    }
  }

  const fromRaiMediaFilteredCount = common.getValueByPath(fromObject, [
    'raiMediaFilteredCount',
  ]);
  if (fromRaiMediaFilteredCount != null) {
    common.setValueByPath(
      toObject,
      ['raiMediaFilteredCount'],
      fromRaiMediaFilteredCount,
    );
  }

  const fromRaiMediaFilteredReasons = common.getValueByPath(fromObject, [
    'raiMediaFilteredReasons',
  ]);
  if (fromRaiMediaFilteredReasons != null) {
    common.setValueByPath(
      toObject,
      ['raiMediaFilteredReasons'],
      fromRaiMediaFilteredReasons,
    );
  }

  return toObject;
}

export function generateVideosOperationFromMldev(
  apiClient: ApiClient,
  fromObject: types.GenerateVideosOperation,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName != null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);
  if (fromMetadata != null) {
    common.setValueByPath(toObject, ['metadata'], fromMetadata);
  }

  const fromDone = common.getValueByPath(fromObject, ['done']);
  if (fromDone != null) {
    common.setValueByPath(toObject, ['done'], fromDone);
  }

  const fromError = common.getValueByPath(fromObject, ['error']);
  if (fromError != null) {
    common.setValueByPath(toObject, ['error'], fromError);
  }

  const fromResponse = common.getValueByPath(fromObject, [
    'response',
    'generateVideoResponse',
  ]);
  if (fromResponse != null) {
    common.setValueByPath(
      toObject,
      ['response'],
      generateVideosResponseFromMldev(apiClient, fromResponse),
    );
  }

  return toObject;
}

export function partFromVertex(
  apiClient: ApiClient,
  fromObject: types.Part,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromVideoMetadata = common.getValueByPath(fromObject, [
    'videoMetadata',
  ]);
  if (fromVideoMetadata != null) {
    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);
  }

  const fromThought = common.getValueByPath(fromObject, ['thought']);
  if (fromThought != null) {
    common.setValueByPath(toObject, ['thought'], fromThought);
  }

  const fromCodeExecutionResult = common.getValueByPath(fromObject, [
    'codeExecutionResult',
  ]);
  if (fromCodeExecutionResult != null) {
    common.setValueByPath(
      toObject,
      ['codeExecutionResult'],
      fromCodeExecutionResult,
    );
  }

  const fromExecutableCode = common.getValueByPath(fromObject, [
    'executableCode',
  ]);
  if (fromExecutableCode != null) {
    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);
  }

  const fromFileData = common.getValueByPath(fromObject, ['fileData']);
  if (fromFileData != null) {
    common.setValueByPath(toObject, ['fileData'], fromFileData);
  }

  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);
  if (fromFunctionCall != null) {
    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);
  }

  const fromFunctionResponse = common.getValueByPath(fromObject, [
    'functionResponse',
  ]);
  if (fromFunctionResponse != null) {
    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);
  }

  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);
  if (fromInlineData != null) {
    common.setValueByPath(toObject, ['inlineData'], fromInlineData);
  }

  const fromText = common.getValueByPath(fromObject, ['text']);
  if (fromText != null) {
    common.setValueByPath(toObject, ['text'], fromText);
  }

  return toObject;
}

export function contentFromVertex(
  apiClient: ApiClient,
  fromObject: types.Content,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromParts = common.getValueByPath(fromObject, ['parts']);
  if (fromParts != null) {
    if (Array.isArray(fromParts)) {
      common.setValueByPath(
        toObject,
        ['parts'],
        fromParts.map((item) => {
          return partFromVertex(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(toObject, ['parts'], fromParts);
    }
  }

  const fromRole = common.getValueByPath(fromObject, ['role']);
  if (fromRole != null) {
    common.setValueByPath(toObject, ['role'], fromRole);
  }

  return toObject;
}

export function citationMetadataFromVertex(
  apiClient: ApiClient,
  fromObject: types.CitationMetadata,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromCitations = common.getValueByPath(fromObject, ['citations']);
  if (fromCitations != null) {
    common.setValueByPath(toObject, ['citations'], fromCitations);
  }

  return toObject;
}

export function candidateFromVertex(
  apiClient: ApiClient,
  fromObject: types.Candidate,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromContent = common.getValueByPath(fromObject, ['content']);
  if (fromContent != null) {
    common.setValueByPath(
      toObject,
      ['content'],
      contentFromVertex(apiClient, fromContent),
    );
  }

  const fromCitationMetadata = common.getValueByPath(fromObject, [
    'citationMetadata',
  ]);
  if (fromCitationMetadata != null) {
    common.setValueByPath(
      toObject,
      ['citationMetadata'],
      citationMetadataFromVertex(apiClient, fromCitationMetadata),
    );
  }

  const fromFinishMessage = common.getValueByPath(fromObject, [
    'finishMessage',
  ]);
  if (fromFinishMessage != null) {
    common.setValueByPath(toObject, ['finishMessage'], fromFinishMessage);
  }

  const fromFinishReason = common.getValueByPath(fromObject, ['finishReason']);
  if (fromFinishReason != null) {
    common.setValueByPath(toObject, ['finishReason'], fromFinishReason);
  }

  const fromAvgLogprobs = common.getValueByPath(fromObject, ['avgLogprobs']);
  if (fromAvgLogprobs != null) {
    common.setValueByPath(toObject, ['avgLogprobs'], fromAvgLogprobs);
  }

  const fromGroundingMetadata = common.getValueByPath(fromObject, [
    'groundingMetadata',
  ]);
  if (fromGroundingMetadata != null) {
    common.setValueByPath(
      toObject,
      ['groundingMetadata'],
      fromGroundingMetadata,
    );
  }

  const fromIndex = common.getValueByPath(fromObject, ['index']);
  if (fromIndex != null) {
    common.setValueByPath(toObject, ['index'], fromIndex);
  }

  const fromLogprobsResult = common.getValueByPath(fromObject, [
    'logprobsResult',
  ]);
  if (fromLogprobsResult != null) {
    common.setValueByPath(toObject, ['logprobsResult'], fromLogprobsResult);
  }

  const fromSafetyRatings = common.getValueByPath(fromObject, [
    'safetyRatings',
  ]);
  if (fromSafetyRatings != null) {
    common.setValueByPath(toObject, ['safetyRatings'], fromSafetyRatings);
  }

  return toObject;
}

export function generateContentResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateContentResponse,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromCandidates = common.getValueByPath(fromObject, ['candidates']);
  if (fromCandidates != null) {
    if (Array.isArray(fromCandidates)) {
      common.setValueByPath(
        toObject,
        ['candidates'],
        fromCandidates.map((item) => {
          return candidateFromVertex(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(toObject, ['candidates'], fromCandidates);
    }
  }

  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime != null) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  const fromResponseId = common.getValueByPath(fromObject, ['responseId']);
  if (fromResponseId != null) {
    common.setValueByPath(toObject, ['responseId'], fromResponseId);
  }

  const fromModelVersion = common.getValueByPath(fromObject, ['modelVersion']);
  if (fromModelVersion != null) {
    common.setValueByPath(toObject, ['modelVersion'], fromModelVersion);
  }

  const fromPromptFeedback = common.getValueByPath(fromObject, [
    'promptFeedback',
  ]);
  if (fromPromptFeedback != null) {
    common.setValueByPath(toObject, ['promptFeedback'], fromPromptFeedback);
  }

  const fromUsageMetadata = common.getValueByPath(fromObject, [
    'usageMetadata',
  ]);
  if (fromUsageMetadata != null) {
    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);
  }

  return toObject;
}

export function contentEmbeddingStatisticsFromVertex(
  apiClient: ApiClient,
  fromObject: types.ContentEmbeddingStatistics,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromTruncated = common.getValueByPath(fromObject, ['truncated']);
  if (fromTruncated != null) {
    common.setValueByPath(toObject, ['truncated'], fromTruncated);
  }

  const fromTokenCount = common.getValueByPath(fromObject, ['token_count']);
  if (fromTokenCount != null) {
    common.setValueByPath(toObject, ['tokenCount'], fromTokenCount);
  }

  return toObject;
}

export function contentEmbeddingFromVertex(
  apiClient: ApiClient,
  fromObject: types.ContentEmbedding,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromValues = common.getValueByPath(fromObject, ['values']);
  if (fromValues != null) {
    common.setValueByPath(toObject, ['values'], fromValues);
  }

  const fromStatistics = common.getValueByPath(fromObject, ['statistics']);
  if (fromStatistics != null) {
    common.setValueByPath(
      toObject,
      ['statistics'],
      contentEmbeddingStatisticsFromVertex(apiClient, fromStatistics),
    );
  }

  return toObject;
}

export function embedContentMetadataFromVertex(
  apiClient: ApiClient,
  fromObject: types.EmbedContentMetadata,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromBillableCharacterCount = common.getValueByPath(fromObject, [
    'billableCharacterCount',
  ]);
  if (fromBillableCharacterCount != null) {
    common.setValueByPath(
      toObject,
      ['billableCharacterCount'],
      fromBillableCharacterCount,
    );
  }

  return toObject;
}

export function embedContentResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.EmbedContentResponse,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromEmbeddings = common.getValueByPath(fromObject, [
    'predictions[]',
    'embeddings',
  ]);
  if (fromEmbeddings != null) {
    if (Array.isArray(fromEmbeddings)) {
      common.setValueByPath(
        toObject,
        ['embeddings'],
        fromEmbeddings.map((item) => {
          return contentEmbeddingFromVertex(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(toObject, ['embeddings'], fromEmbeddings);
    }
  }

  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);
  if (fromMetadata != null) {
    common.setValueByPath(
      toObject,
      ['metadata'],
      embedContentMetadataFromVertex(apiClient, fromMetadata),
    );
  }

  return toObject;
}

export function imageFromVertex(
  apiClient: ApiClient,
  fromObject: types.Image,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromGcsUri = common.getValueByPath(fromObject, ['gcsUri']);
  if (fromGcsUri != null) {
    common.setValueByPath(toObject, ['gcsUri'], fromGcsUri);
  }

  const fromImageBytes = common.getValueByPath(fromObject, [
    'bytesBase64Encoded',
  ]);
  if (fromImageBytes != null) {
    common.setValueByPath(
      toObject,
      ['imageBytes'],
      t.tBytes(apiClient, fromImageBytes),
    );
  }

  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);
  if (fromMimeType != null) {
    common.setValueByPath(toObject, ['mimeType'], fromMimeType);
  }

  return toObject;
}

export function safetyAttributesFromVertex(
  apiClient: ApiClient,
  fromObject: types.SafetyAttributes,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromCategories = common.getValueByPath(fromObject, [
    'safetyAttributes',
    'categories',
  ]);
  if (fromCategories != null) {
    common.setValueByPath(toObject, ['categories'], fromCategories);
  }

  const fromScores = common.getValueByPath(fromObject, [
    'safetyAttributes',
    'scores',
  ]);
  if (fromScores != null) {
    common.setValueByPath(toObject, ['scores'], fromScores);
  }

  const fromContentType = common.getValueByPath(fromObject, ['contentType']);
  if (fromContentType != null) {
    common.setValueByPath(toObject, ['contentType'], fromContentType);
  }

  return toObject;
}

export function generatedImageFromVertex(
  apiClient: ApiClient,
  fromObject: types.GeneratedImage,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromImage = common.getValueByPath(fromObject, ['_self']);
  if (fromImage != null) {
    common.setValueByPath(
      toObject,
      ['image'],
      imageFromVertex(apiClient, fromImage),
    );
  }

  const fromRaiFilteredReason = common.getValueByPath(fromObject, [
    'raiFilteredReason',
  ]);
  if (fromRaiFilteredReason != null) {
    common.setValueByPath(
      toObject,
      ['raiFilteredReason'],
      fromRaiFilteredReason,
    );
  }

  const fromSafetyAttributes = common.getValueByPath(fromObject, ['_self']);
  if (fromSafetyAttributes != null) {
    common.setValueByPath(
      toObject,
      ['safetyAttributes'],
      safetyAttributesFromVertex(apiClient, fromSafetyAttributes),
    );
  }

  const fromEnhancedPrompt = common.getValueByPath(fromObject, ['prompt']);
  if (fromEnhancedPrompt != null) {
    common.setValueByPath(toObject, ['enhancedPrompt'], fromEnhancedPrompt);
  }

  return toObject;
}

export function generateImagesResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateImagesResponse,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromGeneratedImages = common.getValueByPath(fromObject, [
    'predictions',
  ]);
  if (fromGeneratedImages != null) {
    if (Array.isArray(fromGeneratedImages)) {
      common.setValueByPath(
        toObject,
        ['generatedImages'],
        fromGeneratedImages.map((item) => {
          return generatedImageFromVertex(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(toObject, ['generatedImages'], fromGeneratedImages);
    }
  }

  const fromPositivePromptSafetyAttributes = common.getValueByPath(fromObject, [
    'positivePromptSafetyAttributes',
  ]);
  if (fromPositivePromptSafetyAttributes != null) {
    common.setValueByPath(
      toObject,
      ['positivePromptSafetyAttributes'],
      safetyAttributesFromVertex(apiClient, fromPositivePromptSafetyAttributes),
    );
  }

  return toObject;
}

export function endpointFromVertex(
  apiClient: ApiClient,
  fromObject: types.Endpoint,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromName = common.getValueByPath(fromObject, ['endpoint']);
  if (fromName != null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromDeployedModelId = common.getValueByPath(fromObject, [
    'deployedModelId',
  ]);
  if (fromDeployedModelId != null) {
    common.setValueByPath(toObject, ['deployedModelId'], fromDeployedModelId);
  }

  return toObject;
}

export function tunedModelInfoFromVertex(
  apiClient: ApiClient,
  fromObject: types.TunedModelInfo,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromBaseModel = common.getValueByPath(fromObject, [
    'labels',
    'google-vertex-llm-tuning-base-model-id',
  ]);
  if (fromBaseModel != null) {
    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);
  }

  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime != null) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);
  if (fromUpdateTime != null) {
    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);
  }

  return toObject;
}

export function modelFromVertex(
  apiClient: ApiClient,
  fromObject: types.Model,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName != null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);
  if (fromDisplayName != null) {
    common.setValueByPath(toObject, ['displayName'], fromDisplayName);
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription != null) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromVersion = common.getValueByPath(fromObject, ['versionId']);
  if (fromVersion != null) {
    common.setValueByPath(toObject, ['version'], fromVersion);
  }

  const fromEndpoints = common.getValueByPath(fromObject, ['deployedModels']);
  if (fromEndpoints != null) {
    if (Array.isArray(fromEndpoints)) {
      common.setValueByPath(
        toObject,
        ['endpoints'],
        fromEndpoints.map((item) => {
          return endpointFromVertex(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(toObject, ['endpoints'], fromEndpoints);
    }
  }

  const fromLabels = common.getValueByPath(fromObject, ['labels']);
  if (fromLabels != null) {
    common.setValueByPath(toObject, ['labels'], fromLabels);
  }

  const fromTunedModelInfo = common.getValueByPath(fromObject, ['_self']);
  if (fromTunedModelInfo != null) {
    common.setValueByPath(
      toObject,
      ['tunedModelInfo'],
      tunedModelInfoFromVertex(apiClient, fromTunedModelInfo),
    );
  }

  return toObject;
}

export function countTokensResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.CountTokensResponse,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromTotalTokens = common.getValueByPath(fromObject, ['totalTokens']);
  if (fromTotalTokens != null) {
    common.setValueByPath(toObject, ['totalTokens'], fromTotalTokens);
  }

  return toObject;
}

export function computeTokensResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.ComputeTokensResponse,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromTokensInfo = common.getValueByPath(fromObject, ['tokensInfo']);
  if (fromTokensInfo != null) {
    common.setValueByPath(toObject, ['tokensInfo'], fromTokensInfo);
  }

  return toObject;
}

export function videoFromVertex(
  apiClient: ApiClient,
  fromObject: types.Video,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromUri = common.getValueByPath(fromObject, ['gcsUri']);
  if (fromUri != null) {
    common.setValueByPath(toObject, ['uri'], fromUri);
  }

  const fromVideoBytes = common.getValueByPath(fromObject, [
    'bytesBase64Encoded',
  ]);
  if (fromVideoBytes != null) {
    common.setValueByPath(
      toObject,
      ['videoBytes'],
      t.tBytes(apiClient, fromVideoBytes),
    );
  }

  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);
  if (fromMimeType != null) {
    common.setValueByPath(toObject, ['mimeType'], fromMimeType);
  }

  return toObject;
}

export function generatedVideoFromVertex(
  apiClient: ApiClient,
  fromObject: types.GeneratedVideo,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromVideo = common.getValueByPath(fromObject, ['_self']);
  if (fromVideo != null) {
    common.setValueByPath(
      toObject,
      ['video'],
      videoFromVertex(apiClient, fromVideo),
    );
  }

  return toObject;
}

export function generateVideosResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateVideosResponse,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromGeneratedVideos = common.getValueByPath(fromObject, ['videos']);
  if (fromGeneratedVideos != null) {
    if (Array.isArray(fromGeneratedVideos)) {
      common.setValueByPath(
        toObject,
        ['generatedVideos'],
        fromGeneratedVideos.map((item) => {
          return generatedVideoFromVertex(apiClient, item);
        }),
      );
    } else {
      common.setValueByPath(toObject, ['generatedVideos'], fromGeneratedVideos);
    }
  }

  const fromRaiMediaFilteredCount = common.getValueByPath(fromObject, [
    'raiMediaFilteredCount',
  ]);
  if (fromRaiMediaFilteredCount != null) {
    common.setValueByPath(
      toObject,
      ['raiMediaFilteredCount'],
      fromRaiMediaFilteredCount,
    );
  }

  const fromRaiMediaFilteredReasons = common.getValueByPath(fromObject, [
    'raiMediaFilteredReasons',
  ]);
  if (fromRaiMediaFilteredReasons != null) {
    common.setValueByPath(
      toObject,
      ['raiMediaFilteredReasons'],
      fromRaiMediaFilteredReasons,
    );
  }

  return toObject;
}

export function generateVideosOperationFromVertex(
  apiClient: ApiClient,
  fromObject: types.GenerateVideosOperation,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName != null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);
  if (fromMetadata != null) {
    common.setValueByPath(toObject, ['metadata'], fromMetadata);
  }

  const fromDone = common.getValueByPath(fromObject, ['done']);
  if (fromDone != null) {
    common.setValueByPath(toObject, ['done'], fromDone);
  }

  const fromError = common.getValueByPath(fromObject, ['error']);
  if (fromError != null) {
    common.setValueByPath(toObject, ['error'], fromError);
  }

  const fromResponse = common.getValueByPath(fromObject, ['response']);
  if (fromResponse != null) {
    common.setValueByPath(
      toObject,
      ['response'],
      generateVideosResponseFromVertex(apiClient, fromResponse),
    );
  }

  return toObject;
}
